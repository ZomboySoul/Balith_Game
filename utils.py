# =======================================
# üîß FUNCIONES AUXILIARES - BLACKJACK üîß
# =======================================

import os
import json
from colorama import init, Fore, Style
init(autoreset=True)
archivo_datos = "jugadores.json"

# ============================
# üßπ FUNCIONES DE LIMPIEZA
# ============================

# Funci√≥n para limpiar la consola
def limpiar_consola():
    os.system('cls' if os.name == 'nt' else 'clear')


# ===============================
# üìã FUNCIONES DE VISUALIZACI√ìN
# ===============================

# Funci√≥n para mostrar el men√∫ de inicio
def mostrar_inicio():
    limpiar_consola()
    print(Fore.GREEN + Style.BRIGHT + "‚ïê" * 46)
    print(Fore.MAGENTA + Style.BRIGHT + "        ‚ô†Ô∏è‚ô¶Ô∏è   BLACKJACK EN PYTHON  ‚ô£Ô∏è‚ô•Ô∏è        ")
    print(Fore.GREEN + Style.BRIGHT + "‚ïê" * 46 + "\n")

# Funci√≥n para mostrar la mano del jugador o del crupier
def mostrar_mano(mano, ocultar_primera=False):
    simbolos = {
        'Corazones': '‚ô•Ô∏è',
        'Diamantes': '‚ô¶Ô∏è',  
        'Tr√©boles': '‚ô£Ô∏è',
        'Picas': '‚ô†Ô∏è'
    }

    if ocultar_primera:
        print(Fore.YELLOW + "[Carta oculta]" + Style.RESET_ALL)
        cartas_a_mostrar = mano[1:]
    else:
        cartas_a_mostrar = mano

    # Mostramos todas las cartas en una sola l√≠nea
    for carta in cartas_a_mostrar:
        simbolo = simbolos[carta[1]]
        color = Fore.RED if carta[1] in ['Corazones', 'Diamantes'] else Fore.WHITE
        valor = carta[0]

        # Mostrar la carta con marco
        print(color + "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê", end="  ")
    print()  # Espacio despu√©s de las primeras l√≠neas

    for carta in cartas_a_mostrar:
        simbolo = simbolos[carta[1]]
        color = Fore.RED if carta[1] in ['Corazones', 'Diamantes'] else Fore.WHITE
        valor = carta[0]

        # Ajuste para que el s√≠mbolo ocupe dos espacios
        print(f"{color}‚îÇ {Fore.RESET}{valor:<2}  {color}{simbolo:<2}‚îÇ", end="  ")
    print()  # Espacio despu√©s de la segunda l√≠nea

    for carta in cartas_a_mostrar:
        simbolo = simbolos[carta[1]]
        color = Fore.RED if carta[1] in ['Corazones', 'Diamantes'] else Fore.WHITE
        valor = carta[0]

        print(color + "‚îÇ      ‚îÇ", end="  ")
    print()  # Espacio despu√©s de la tercera l√≠nea

    for carta in cartas_a_mostrar:
        simbolo = simbolos[carta[1]]
        color = Fore.RED if carta[1] in ['Corazones', 'Diamantes'] else Fore.WHITE
        valor = carta[0]

        # Ajuste para que el s√≠mbolo ocupe dos espacios
        print(f"{color}‚îÇ {simbolo:<2}{Fore.RESET} {valor:>2}{color} ‚îÇ", end="  ")
    print()  # Espacio despu√©s de la cuarta l√≠nea

    for carta in cartas_a_mostrar:
        simbolo = simbolos[carta[1]]
        color = Fore.RED if carta[1] in ['Corazones', 'Diamantes'] else Fore.WHITE
        valor = carta[0]

        print(color + "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò", end="  ")
    print()  # Espacio al final para separar las cartas



# Funci√≥n para obtener las estad√≠sticas del jugador
def obtener_estadisticas(nombre_usuario):
    if os.path.exists(archivo_datos):
        with open(archivo_datos, 'r') as f:
            jugadores = json.load(f)
        jugador = jugadores.get(nombre_usuario)
        if jugador:
            return jugador.get("victorias", 0), jugador.get("derrotas", 0)
    return 0, 0